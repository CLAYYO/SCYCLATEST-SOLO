---
import Layout from '../../../layouts/Layout.astro';
import { supabase } from '../../../lib/supabase';

// Fetch classes data
const { data: classes, error } = await supabase
  .from('acf_classes')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching classes:', error);
}

const classesCount = classes?.length || 0;
---

<Layout title="Manage Classes - ACF Content">
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-2xl font-bold text-gray-900">Manage Classes</h1>
            <p class="mt-1 text-sm text-gray-500">Boat class information and specifications</p>
          </div>
          <div class="flex space-x-3">
            <a href="/admin/acf-content" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              ‚Üê Back to ACF Content
            </a>
            <button id="addClassBtn" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
              Add New Class
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Stats -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
      <div class="bg-white rounded-lg shadow p-6">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <div class="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
          </div>
          <div class="ml-5 w-0 flex-1">
            <dl>
              <dt class="text-sm font-medium text-gray-500 truncate">Total Classes</dt>
              <dd class="text-lg font-medium text-gray-900">{classesCount}</dd>
            </dl>
          </div>
        </div>
      </div>
    </div>

    <!-- Classes Grid -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-12">
      <div class="bg-white shadow rounded-lg">
        <div class="px-4 py-5 sm:p-6">
          <div id="classesGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {classes && classes.map((classItem) => (
              <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                {classItem.image_url && (
                  <div class="mb-4">
                    <img src={classItem.image_url} alt={classItem.class_name} class="w-full h-48 object-cover rounded-md" />
                  </div>
                )}
                <div class="space-y-2">
                  <h3 class="text-lg font-semibold text-gray-900">{classItem.class_name}</h3>
                  {classItem.description && (
                    <p class="text-sm text-gray-600 line-clamp-3">{classItem.description}</p>
                  )}
                  {classItem.specifications && (
                    <div class="text-xs text-gray-500">
                      <strong>Specs:</strong> {classItem.specifications.substring(0, 100)}...
                    </div>
                  )}
                  <div class="flex justify-between items-center pt-3">
                    <span class="text-xs text-gray-400">
                      {new Date(classItem.created_at).toLocaleDateString()}
                    </span>
                    <div class="flex space-x-2">
                      <button 
                        class="editClassBtn text-blue-600 hover:text-blue-800 text-sm font-medium"
                        data-id={classItem.id}
                      >
                        Edit
                      </button>
                      <button 
                        class="deleteClassBtn text-red-600 hover:text-red-800 text-sm font-medium"
                        data-id={classItem.id}
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {(!classes || classes.length === 0) && (
            <div class="text-center py-12">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
              <h3 class="mt-2 text-sm font-medium text-gray-900">No classes</h3>
              <p class="mt-1 text-sm text-gray-500">Get started by creating a new boat class.</p>
              <div class="mt-6">
                <button id="addClassBtnEmpty" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700">
                  Add New Class
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Class Modal -->
  <div id="classModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Add New Class</h3>
          <button id="closeModal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <form id="classForm" class="space-y-4">
          <input type="hidden" id="classId" name="id">
          
          <div>
            <label for="className" class="block text-sm font-medium text-gray-700">Class Name *</label>
            <input type="text" id="className" name="class_name" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
            <textarea id="description" name="description" rows="3" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"></textarea>
          </div>
          
          <div>
            <label for="specifications" class="block text-sm font-medium text-gray-700">Specifications</label>
            <textarea id="specifications" name="specifications" rows="4" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Technical specifications, dimensions, etc."></textarea>
          </div>
          
          <div>
            <label for="classImage" class="block text-sm font-medium text-gray-700">Class Image</label>
            <input type="file" id="classImage" name="image" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
            <p class="mt-1 text-sm text-gray-500">PNG, JPG, GIF up to 10MB</p>
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button type="button" id="cancelBtn" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              Cancel
            </button>
            <button type="submit" id="saveBtn" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
              <span id="saveText">Save Class</span>
              <span id="savingText" class="hidden">Saving...</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Modal functionality
    const modal = document.getElementById('classModal');
    const modalTitle = document.getElementById('modalTitle');
    const classForm = document.getElementById('classForm');
    const classId = document.getElementById('classId');
    const saveBtn = document.getElementById('saveBtn');
    const saveText = document.getElementById('saveText');
    const savingText = document.getElementById('savingText');
    
    // Open modal for adding new class
    document.getElementById('addClassBtn')?.addEventListener('click', () => {
      modalTitle.textContent = 'Add New Class';
      classForm.reset();
      classId.value = '';
      modal.classList.remove('hidden');
    });
    
    document.getElementById('addClassBtnEmpty')?.addEventListener('click', () => {
      modalTitle.textContent = 'Add New Class';
      classForm.reset();
      classId.value = '';
      modal.classList.remove('hidden');
    });
    
    // Close modal
    document.getElementById('closeModal')?.addEventListener('click', () => {
      modal.classList.add('hidden');
    });
    
    document.getElementById('cancelBtn')?.addEventListener('click', () => {
      modal.classList.add('hidden');
    });
    
    // Close modal when clicking outside
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
      }
    });
    
    // Edit class
    document.querySelectorAll('.editClassBtn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const id = e.target.getAttribute('data-id');
        try {
          const response = await fetch(`/api/admin/acf-classes?id=${id}`);
          const data = await response.json();
          
          if (data.class) {
            modalTitle.textContent = 'Edit Class';
            classId.value = data.class.id;
            document.getElementById('className').value = data.class.class_name || '';
            document.getElementById('description').value = data.class.description || '';
            document.getElementById('specifications').value = data.class.specifications || '';
            modal.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Error fetching class:', error);
          alert('Error loading class data');
        }
      });
    });
    
    // Delete class
    document.querySelectorAll('.deleteClassBtn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const id = e.target.getAttribute('data-id');
        if (confirm('Are you sure you want to delete this class?')) {
          try {
            const response = await fetch('/api/admin/acf-classes', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id })
            });
            
            if (response.ok) {
              location.reload();
            } else {
              alert('Error deleting class');
            }
          } catch (error) {
            console.error('Error deleting class:', error);
            alert('Error deleting class');
          }
        }
      });
    });
    
    // Form submission
    classForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Show saving state
      saveText.classList.add('hidden');
      savingText.classList.remove('hidden');
      saveBtn.disabled = true;
      
      try {
        const formData = new FormData(classForm);
        const id = classId.value;
        
        const url = '/api/admin/acf-classes';
        const method = id ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method: method,
          body: formData
        });
        
        if (response.ok) {
          location.reload();
        } else {
          const errorData = await response.json();
          alert('Error saving class: ' + (errorData.error || 'Unknown error'));
        }
      } catch (error) {
        console.error('Error saving class:', error);
        alert('Error saving class');
      } finally {
        // Reset saving state
        saveText.classList.remove('hidden');
        savingText.classList.add('hidden');
        saveBtn.disabled = false;
      }
    });
  </script>
</Layout>