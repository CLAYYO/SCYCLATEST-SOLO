---
import Layout from '../../../layouts/Layout.astro';
import { supabase } from '../../../lib/supabase';

// Get all people
const { data: people, error } = await supabase
  .from('acf_people')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching people:', error);
}
---

<Layout title="People Management - ACF Content">
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center py-6">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">People Management</h1>
            <p class="mt-1 text-sm text-gray-500">Manage staff and committee member profiles</p>
          </div>
          <div class="flex space-x-3">
            <a 
              href="/admin/acf-content" 
              class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              ‚Üê Back to ACF Content
            </a>
            <button 
              id="add-person-btn"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              + Add New Person
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Stats -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-blue-600">{people?.length || 0}</div>
          <div class="text-sm text-gray-500">Total People</div>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-green-600">{people?.filter(p => p.persons_image_url).length || 0}</div>
          <div class="text-sm text-gray-500">With Photos</div>
        </div>
        <div class="bg-white rounded-lg shadow p-6">
          <div class="text-2xl font-bold text-purple-600">{people?.filter(p => p.position).length || 0}</div>
          <div class="text-sm text-gray-500">With Positions</div>
        </div>
      </div>

      <!-- People Grid -->
      <div class="bg-white shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-medium text-gray-900">All People</h2>
        </div>
        
        {people && people.length > 0 ? (
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
            {people.map((person) => (
              <div class="bg-gray-50 rounded-lg p-6 hover:shadow-md transition-shadow">
                <div class="flex items-center space-x-4">
                  {person.persons_image_url ? (
                    <img 
                      src={person.persons_image_url} 
                      alt={person.persons_name}
                      class="w-16 h-16 rounded-full object-cover"
                    >
                  ) : (
                    <div class="w-16 h-16 rounded-full bg-gray-300 flex items-center justify-center">
                      <svg class="w-8 h-8 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd" />
                      </svg>
                    </div>
                  )}
                  <div class="flex-1 min-w-0">
                    <h3 class="text-lg font-medium text-gray-900 truncate">{person.persons_name}</h3>
                    {person.position && (
                      <p class="text-sm text-blue-600 font-medium">{person.position}</p>
                    )}
                    {person.where_do_they_work && (
                      <p class="text-sm text-gray-500">{person.where_do_they_work}</p>
                    )}
                  </div>
                </div>
                
                <div class="mt-4 flex justify-end space-x-2">
                  <button 
                    class="text-blue-600 hover:text-blue-900 text-sm font-medium edit-person-btn" 
                    data-person-id={person.id}
                  >
                    Edit
                  </button>
                  <button 
                    class="text-red-600 hover:text-red-900 text-sm font-medium delete-person-btn" 
                    data-person-id={person.id}
                  >
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div class="text-center py-12">
            <div class="text-gray-500 text-lg mb-4">No people found</div>
            <button 
              id="add-first-person-btn"
              class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              + Add Your First Person
            </button>
          </div>
        )}
      </div>
    </div>
  </div>

  <!-- Add/Edit Person Modal -->
  <div id="person-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-2/3 lg:w-1/2 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-medium text-gray-900" id="modal-title">Add New Person</h3>
          <button id="close-modal" class="text-gray-400 hover:text-gray-600">
            <span class="sr-only">Close</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <form id="person-form" class="space-y-4">
          <input type="hidden" id="person-id" name="id">
          
          <div>
            <label for="persons_name" class="block text-sm font-medium text-gray-700">Person's Name *</label>
            <input type="text" id="persons_name" name="persons_name" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500">
          </div>
          
          <div>
            <label for="position" class="block text-sm font-medium text-gray-700">Position</label>
            <input type="text" id="position" name="position" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="e.g., Commodore, Secretary, Race Officer">
          </div>
          
          <div>
            <label for="where_do_they_work" class="block text-sm font-medium text-gray-700">Where Do They Work</label>
            <input type="text" id="where_do_they_work" name="where_do_they_work" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" placeholder="Organization or company">
          </div>
          
          <!-- Image Upload Section -->
          <div class="border-t pt-4">
            <h4 class="text-md font-medium text-gray-900 mb-3">Profile Image</h4>
            <div>
              <label for="persons_image" class="block text-sm font-medium text-gray-700">Upload Photo</label>
              <input type="file" id="persons_image" name="persons_image" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
              <p class="mt-1 text-sm text-gray-500">PNG, JPG, GIF up to 10MB</p>
            </div>
            
            <!-- Current image preview -->
            <div id="current-image-preview" class="mt-3 hidden">
              <label class="block text-sm font-medium text-gray-700 mb-2">Current Image</label>
              <img id="current-image" src="" alt="Current profile image" class="w-24 h-24 rounded-full object-cover">
            </div>
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button type="button" id="cancel-btn" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
              Cancel
            </button>
            <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
              Save Person
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Modal functionality
    const modal = document.getElementById('person-modal');
    const addPersonBtn = document.getElementById('add-person-btn');
    const addFirstPersonBtn = document.getElementById('add-first-person-btn');
    const closeModal = document.getElementById('close-modal');
    const cancelBtn = document.getElementById('cancel-btn');
    const personForm = document.getElementById('person-form');
    const modalTitle = document.getElementById('modal-title');
    const currentImagePreview = document.getElementById('current-image-preview');
    const currentImage = document.getElementById('current-image');
    
    let isEditing = false;
    
    // Open modal for new person
    function openModal(person = null) {
      modal.classList.remove('hidden');
      
      if (person) {
        isEditing = true;
        modalTitle.textContent = 'Edit Person';
        populateForm(person);
      } else {
        isEditing = false;
        modalTitle.textContent = 'Add New Person';
        personForm.reset();
        currentImagePreview.classList.add('hidden');
      }
    }
    
    // Close modal
    function closeModalHandler() {
      modal.classList.add('hidden');
      personForm.reset();
      currentImagePreview.classList.add('hidden');
    }
    
    // Populate form with person data
    function populateForm(person) {
      Object.keys(person).forEach(key => {
        const input = document.getElementById(key);
        if (input && person[key] !== null) {
          input.value = person[key];
        }
      });
      
      // Show current image if exists
      if (person.persons_image_url) {
        currentImage.src = person.persons_image_url;
        currentImagePreview.classList.remove('hidden');
      }
    }
    
    // Event listeners
    addPersonBtn?.addEventListener('click', () => openModal());
    addFirstPersonBtn?.addEventListener('click', () => openModal());
    closeModal.addEventListener('click', closeModalHandler);
    cancelBtn.addEventListener('click', closeModalHandler);
    
    // Edit person buttons
    document.querySelectorAll('.edit-person-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const personId = e.target.dataset.personId;
        
        try {
          const response = await fetch(`/api/admin/acf-people?id=${personId}`);
          const data = await response.json();
          
          if (response.ok) {
            openModal(data.person);
          } else {
            alert('Error loading person: ' + data.error);
          }
        } catch (error) {
          console.error('Error fetching person:', error);
          alert('Error loading person. Please try again.');
        }
      });
    });
    
    // Delete person buttons
    document.querySelectorAll('.delete-person-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const personId = e.target.dataset.personId;
        
        if (confirm('Are you sure you want to delete this person?')) {
          try {
            const response = await fetch('/api/admin/acf-people', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ id: personId })
            });
            
            const data = await response.json();
            
            if (response.ok) {
              alert('Person deleted successfully!');
              window.location.reload();
            } else {
              alert('Error deleting person: ' + data.error);
            }
          } catch (error) {
            console.error('Error deleting person:', error);
            alert('Error deleting person. Please try again.');
          }
        }
      });
    });
    
    // Form submission
    personForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(personForm);
      const submitBtn = e.target.querySelector('button[type="submit"]');
      
      // Disable submit button and show loading
      submitBtn.disabled = true;
      submitBtn.textContent = 'Saving...';
      
      try {
        const method = isEditing ? 'PUT' : 'POST';
        const response = await fetch('/api/admin/acf-people', {
          method: method,
          body: formData
        });
        
        const data = await response.json();
        
        if (response.ok) {
          alert(data.message);
          closeModalHandler();
          window.location.reload();
        } else {
          alert('Error saving person: ' + data.error);
        }
      } catch (error) {
        console.error('Error saving person:', error);
        alert('Error saving person. Please try again.');
      } finally {
        // Re-enable submit button
        submitBtn.disabled = false;
        submitBtn.textContent = 'Save Person';
      }
    });
    
    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModalHandler();
      }
    });
  </script>
</Layout>