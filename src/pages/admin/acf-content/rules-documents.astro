---
import Layout from '../../../layouts/Layout.astro';
import { supabaseServer } from '../../../lib/supabase-server';

// Fetch rules/documents data
const { data: rulesDocuments, error } = await supabaseServer
  .from('acf_rules_documents')
  .select('*')
  .order('created_at', { ascending: false });

if (error) {
  console.error('Error fetching rules/documents:', error);
}

const totalDocuments = rulesDocuments?.length || 0;
---

<Layout title="Rules & Documents Management - SCYC Admin">
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-3xl font-bold text-gray-900">Rules & Documents</h1>
            <p class="mt-2 text-gray-600">Manage club documents, rules, and sailing programmes</p>
          </div>
          <button
            id="addDocumentBtn"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors"
          >
            Add New Document
          </button>
        </div>
      </div>

      <!-- Stats -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Documents</p>
              <p class="text-2xl font-semibold text-gray-900">{totalDocuments}</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Documents Grid -->
      <div class="bg-white shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-medium text-gray-900">All Documents</h3>
        </div>
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="documentsTableBody">
              {rulesDocuments?.map((doc) => (
                <tr key={doc.id}>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-lg bg-blue-100 flex items-center justify-center">
                          <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                          </svg>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">{doc.title}</div>
                        {doc.description && (
                          <div class="text-sm text-gray-500">{doc.description.substring(0, 60)}...</div>
                        )}
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {doc.category || 'General'}
                    </span>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {doc.document_url ? 'File' : 'Text'}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {new Date(doc.updated_at).toLocaleDateString()}
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    <button
                      class="text-blue-600 hover:text-blue-900 mr-4 edit-btn"
                      data-id={doc.id}
                    >
                      Edit
                    </button>
                    <button
                      class="text-red-600 hover:text-red-900 delete-btn"
                      data-id={doc.id}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <!-- Add/Edit Document Modal -->
  <div id="documentModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 transition-opacity" aria-hidden="true">
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
      </div>
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <form id="documentForm" enctype="multipart/form-data">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="sm:flex sm:items-start">
              <div class="w-full">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4" id="modalTitle">
                  Add New Document
                </h3>
                
                <input type="hidden" id="documentId" name="id">
                
                <div class="mb-4">
                  <label for="title" class="block text-sm font-medium text-gray-700 mb-2">Title *</label>
                  <input
                    type="text"
                    id="title"
                    name="title"
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                </div>
                
                <div class="mb-4">
                  <label for="category" class="block text-sm font-medium text-gray-700 mb-2">Category</label>
                  <select
                    id="category"
                    name="category"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Select Category</option>
                    <option value="Rules">Rules</option>
                    <option value="Articles">Articles</option>
                    <option value="Sailing Programme">Sailing Programme</option>
                    <option value="Blue Book">Blue Book</option>
                    <option value="General">General</option>
                  </select>
                </div>
                
                <div class="mb-4">
                  <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                  <textarea
                    id="description"
                    name="description"
                    rows="3"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  ></textarea>
                </div>
                
                <div class="mb-4">
                  <label for="content" class="block text-sm font-medium text-gray-700 mb-2">Content</label>
                  <textarea
                    id="content"
                    name="content"
                    rows="6"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter document content or leave empty if uploading a file"
                  ></textarea>
                </div>
                
                <div class="mb-4">
                  <label for="document" class="block text-sm font-medium text-gray-700 mb-2">Document File</label>
                  <input
                    type="file"
                    id="document"
                    name="document"
                    accept=".pdf,.doc,.docx,.txt"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                  <p class="text-sm text-gray-500 mt-1">Upload a PDF, Word document, or text file</p>
                </div>
              </div>
            </div>
          </div>
          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="submit"
              id="saveBtn"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Save Document
            </button>
            <button
              type="button"
              id="cancelBtn"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Modal elements
    const modal = document.getElementById('documentModal');
    const modalTitle = document.getElementById('modalTitle');
    const documentForm = document.getElementById('documentForm');
    const addBtn = document.getElementById('addDocumentBtn');
    const cancelBtn = document.getElementById('cancelBtn');
    const saveBtn = document.getElementById('saveBtn');
    
    let isEditing = false;
    let editingId = null;

    // Show modal
    function showModal(title = 'Add New Document') {
      modalTitle.textContent = title;
      modal.classList.remove('hidden');
    }

    // Hide modal
    function hideModal() {
      modal.classList.add('hidden');
      documentForm.reset();
      isEditing = false;
      editingId = null;
    }

    // Add document button
    addBtn.addEventListener('click', () => {
      showModal('Add New Document');
    });

    // Cancel button
    cancelBtn.addEventListener('click', hideModal);

    // Close modal on backdrop click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        hideModal();
      }
    });

    // Edit buttons
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const id = e.target.dataset.id;
        editingId = id;
        isEditing = true;
        
        try {
          const response = await fetch(`/api/admin/acf-rules-documents?id=${id}`);
          const data = await response.json();
          
          if (data.document) {
            document.getElementById('documentId').value = data.document.id;
            document.getElementById('title').value = data.document.title || '';
            document.getElementById('category').value = data.document.category || '';
            document.getElementById('description').value = data.document.description || '';
            document.getElementById('content').value = data.document.content || '';
            
            showModal('Edit Document');
          }
        } catch (error) {
          console.error('Error fetching document:', error);
          alert('Error loading document data');
        }
      });
    });

    // Delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const id = e.target.dataset.id;
        
        if (confirm('Are you sure you want to delete this document?')) {
          try {
            const response = await fetch('/api/admin/acf-rules-documents', {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ id })
            });
            
            if (response.ok) {
              location.reload();
            } else {
              alert('Error deleting document');
            }
          } catch (error) {
            console.error('Error deleting document:', error);
            alert('Error deleting document');
          }
        }
      });
    });

    // Form submission
    documentForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(documentForm);
      const method = isEditing ? 'PUT' : 'POST';
      
      // Show loading state
      saveBtn.textContent = 'Saving...';
      saveBtn.disabled = true;
      
      try {
        const response = await fetch('/api/admin/acf-rules-documents', {
          method: method,
          body: formData
        });
        
        if (response.ok) {
          hideModal();
          location.reload();
        } else {
          const errorData = await response.json();
          alert(`Error: ${errorData.error || 'Failed to save document'}`);
        }
      } catch (error) {
        console.error('Error saving document:', error);
        alert('Error saving document');
      } finally {
        saveBtn.textContent = 'Save Document';
        saveBtn.disabled = false;
      }
    });
  </script>
</Layout>